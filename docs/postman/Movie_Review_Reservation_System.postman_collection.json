{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
		"name": "Movie Review & Reservation System",
		"description": "A comprehensive collection for testing the Movie Review & Reservation System API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Authentication",
			"item": [
				{
					"name": "Login as User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.success && jsonData.data && jsonData.data.token) {",
									"    pm.environment.set(\"userToken\", jsonData.data.token);",
									"    console.log(\"User token saved to environment\");",
									"    pm.test(\"Login successful and token saved\", function() {",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data.token).to.be.a('string');",
									"    });",
									"} else {",
									"    console.log(\"Failed to extract token\");",
									"    pm.test(\"Login failed\", function() {",
									"        pm.expect(jsonData.success).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user\",\n    \"password\": \"password\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login with the regular user account (username: user, password: password)"
					},
					"response": []
				},
				{
					"name": "Login as Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.success && jsonData.data && jsonData.data.token) {",
									"    pm.environment.set(\"adminToken\", jsonData.data.token);",
									"    console.log(\"Admin token saved to environment\");",
									"    pm.test(\"Login successful and token saved\", function() {",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data.token).to.be.a('string');",
									"    });",
									"} else {",
									"    console.log(\"Failed to extract token\");",
									"    pm.test(\"Login failed\", function() {",
									"        pm.expect(jsonData.success).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login with the admin account (username: admin, password: password)"
					},
					"response": []
				},
				{
					"name": "Register New User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newuser\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for login and registration"
		},
		{
			"name": "2. Movie Management",
			"item": [
				{
					"name": "Get All Movies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/movies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"movies"
							]
						},
						"description": "Get a list of all movies with their reviews"
					},
					"response": []
				},
				{
					"name": "Search Movies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/movies?search=Matrix",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"movies"
							],
							"query": [
								{
									"key": "search",
									"value": "Matrix"
								}
							]
						},
						"description": "Search for movies by title or genre"
					},
					"response": []
				},
				{
					"name": "Get Movie by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/movies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"movies",
								"1"
							]
						},
						"description": "Get details of a specific movie (The Matrix)"
					},
					"response": []
				},
				{
					"name": "Add Movie (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Interstellar\",\n    \"genre\": \"Sci-Fi\",\n    \"releaseYear\": 2014,\n    \"description\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"posterImageUrl\": \"https://example.com/interstellar.jpg\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/movies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"movies"
							]
						},
						"description": "Add a new movie (admin only)"
					},
					"response": []
				}
			],
			"description": "Endpoints for movie management"
		},
		{
			"name": "3. Review Management",
			"item": [
				{
					"name": "Add Review for Movie",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"One of the best sci-fi movies ever made!\",\n    \"rating\": 5\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/reviews/movies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								"movies",
								"1"
							]
						},
						"description": "Add a review for The Matrix (movie ID 1)"
					},
					"response": []
				},
				{
					"name": "Get My Reviews",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/reviews/my-reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								"my-reviews"
							]
						},
						"description": "Get all reviews by the current user"
					},
					"response": []
				},
				{
					"name": "Update Review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This script assumes you've already created a review and stored its ID",
									"// If you don't have a review ID stored, you'll need to get it from the 'Get My Reviews' response",
									"if (!pm.environment.get(\"reviewId\")) {",
									"    console.log(\"No review ID found in environment. Please run 'Get My Reviews' first and set reviewId manually.\");",
									"    pm.environment.set(\"reviewId\", 1); // Default to 1 for testing",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\": \"After watching it again, I still think it's amazing!\",\n    \"rating\": 5\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/reviews/{{reviewId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								"{{reviewId}}"
							]
						},
						"description": "Update an existing review"
					},
					"response": []
				}
			],
			"description": "Endpoints for review management"
		},
		{
			"name": "4. Theater Management",
			"item": [
				{
					"name": "Get All Theaters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/theaters",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"theaters"
							]
						},
						"description": "Get a list of all theaters"
					},
					"response": []
				},
				{
					"name": "Get Theater by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/theaters/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"theaters",
								"1"
							]
						},
						"description": "Get details of a specific theater (Cineplex)"
					},
					"response": []
				},
				{
					"name": "Search Theaters by Location",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/theaters/search?location=Downtown",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"theaters",
								"search"
							],
							"query": [
								{
									"key": "location",
									"value": "Downtown"
								}
							]
						},
						"description": "Search for theaters by location"
					},
					"response": []
				},
				{
					"name": "Add Theater (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"CineStar\",\n    \"location\": \"Eastside\",\n    \"capacity\": 180\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/theaters",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"theaters"
							]
						},
						"description": "Add a new theater (admin only)"
					},
					"response": []
				}
			],
			"description": "Endpoints for theater management"
		},
		{
			"name": "5. Showtime Management",
			"item": [
				{
					"name": "Get Showtimes by Date",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/showtimes?date={{$isoToday}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"showtimes"
							],
							"query": [
								{
									"key": "date",
									"value": "{{$isoToday}}"
								}
							]
						},
						"description": "Get showtimes for today's date"
					},
					"response": []
				},
				{
					"name": "Get Showtimes by Movie",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/showtimes/movies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"showtimes",
								"movies",
								"1"
							]
						},
						"description": "Get showtimes for The Matrix (movie ID 1)"
					},
					"response": []
				},
				{
					"name": "Get Showtimes by Theater",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/showtimes/theaters/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"showtimes",
								"theaters",
								"1"
							]
						},
						"description": "Get showtimes for Cineplex (theater ID 1)"
					},
					"response": []
				},
				{
					"name": "Get Available Showtimes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/showtimes/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"showtimes",
								"available"
							]
						},
						"description": "Get available showtimes from today"
					},
					"response": []
				},
				{
					"name": "Get Showtime by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/showtimes/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"showtimes",
								"1"
							]
						},
						"description": "Get details of a specific showtime"
					},
					"response": []
				},
				{
					"name": "Add Showtime (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"movieId\": 1,\n    \"theaterId\": 1,\n    \"showDate\": \"{{$isoTomorrow}}\",\n    \"showTime\": \"20:30:00\",\n    \"totalSeats\": 150,\n    \"price\": 13.99\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/showtimes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"showtimes"
							]
						},
						"description": "Add a new showtime (admin only)"
					},
					"response": []
				}
			],
			"description": "Endpoints for showtime management"
		},
		{
			"name": "6. Seat Management",
			"item": [
				{
					"name": "Get All Seats for Showtime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.success && jsonData.data && jsonData.data.length > 0) {",
									"    // Store the first two seat IDs for later use in reservation",
									"    pm.environment.set(\"seatId1\", jsonData.data[0].id);",
									"    ",
									"    if (jsonData.data.length > 1) {",
									"        pm.environment.set(\"seatId2\", jsonData.data[1].id);",
									"    }",
									"    ",
									"    pm.test(\"Seats found and IDs saved\", function() {",
									"        pm.expect(jsonData.data.length).to.be.greaterThan(0);",
									"    });",
									"} else {",
									"    console.log(\"No seats found\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/seats/showtimes/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seats",
								"showtimes",
								"1"
							]
						},
						"description": "Get all seats for showtime ID 1 (The Matrix at Cineplex)"
					},
					"response": []
				},
				{
					"name": "Get Available Seats for Showtime",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/seats/showtimes/1/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seats",
								"showtimes",
								"1",
								"available"
							]
						},
						"description": "Get available seats for showtime ID 1 (The Matrix at Cineplex)"
					},
					"response": []
				}
			],
			"description": "Endpoints for seat management"
		},
		{
			"name": "7. Reservation Management",
			"item": [
				{
					"name": "Create Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.success && jsonData.data && jsonData.data.id) {",
									"    pm.environment.set(\"reservationId\", jsonData.data.id);",
									"    pm.test(\"Reservation created successfully\", function() {",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data.id).to.be.a('number');",
									"    });",
									"} else {",
									"    console.log(\"Failed to create reservation\");",
									"    pm.test(\"Reservation creation failed\", function() {",
									"        pm.expect(jsonData.success).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if we have seat IDs stored",
									"const seatId1 = pm.environment.get(\"seatId1\");",
									"const seatId2 = pm.environment.get(\"seatId2\");",
									"",
									"// If we don't have seat IDs, use default values for testing",
									"if (!seatId1) {",
									"    pm.environment.set(\"seatId1\", 1);",
									"}",
									"",
									"if (!seatId2) {",
									"    pm.environment.set(\"seatId2\", 2);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"showtimeId\": 1,\n    \"seatIds\": [{{seatId1}}, {{seatId2}}]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/reservations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations"
							]
						},
						"description": "Create a reservation for showtime ID 1 (The Matrix at Cineplex) with two seats"
					},
					"response": []
				},
				{
					"name": "Get My Reservations",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/reservations/my-reservations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations",
								"my-reservations"
							]
						},
						"description": "Get all reservations for the current user"
					},
					"response": []
				},
				{
					"name": "Get Reservation by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/reservations/{{reservationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						},
						"description": "Get details of a specific reservation"
					},
					"response": []
				},
				{
					"name": "Cancel Reservation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/reservations/{{reservationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations",
								"{{reservationId}}"
							]
						},
						"description": "Cancel a reservation"
					},
					"response": []
				},
				{
					"name": "Get All Reservations (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/reservations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"reservations"
							]
						},
						"description": "Get all reservations (admin only)"
					},
					"response": []
				}
			],
			"description": "Endpoints for reservation management"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Get today's date in ISO format (YYYY-MM-DD)",
					"const today = new Date();",
					"const isoDate = today.toISOString().split('T')[0];",
					"pm.environment.set(\"$isoToday\", isoDate);",
					"",
					"// Get tomorrow's date in ISO format",
					"const tomorrow = new Date();",
					"tomorrow.setDate(tomorrow.getDate() + 1);",
					"const isoTomorrow = tomorrow.toISOString().split('T')[0];",
					"pm.environment.set(\"$isoTomorrow\", isoTomorrow);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
